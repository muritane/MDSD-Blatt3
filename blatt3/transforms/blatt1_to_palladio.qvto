modeltype blatt1 "strict" uses blatt1('http://www.example.org/blatt1');
modeltype palladio "strict" uses pcm('http://palladiosimulator.org/PalladioComponentModel/5.2');

transformation blatt12palladio(in srcModel : blatt1, out destModel : palladio);

main() {
	srcModel.objects()[blatt1::DummyClass] -> map Dummy2Repository();
	srcModel.objects()[blatt1::Repository::Component] -> map Component2Component();
	srcModel.objects()[blatt1::Assembly::System] -> map System2Allocation();
	srcModel.objects()[blatt1::Repository::CompositeComponent] -> map CompositeComponent2CompositeComponent();
	//srcModel.objects()[blatt1::Assembly::AssemblyContext] -> map AssemblyContext2AssemblyContext();
	srcModel.objects()[blatt1::Assembly::AssemblyConnector] -> map AssemblyConnector2AssemblyConnector();
}

mapping blatt1::DummyClass :: Dummy2Repository() : palladio::repository::Repository {
	srcModel.objects()[blatt1::Repository::Interface] -> map Interface2Interface(result);
}

mapping blatt1::Repository::Interface :: Interface2Interface(repo : palladio::repository::Repository) : palladio::repository::OperationInterface {
	init {result.repository__Interface := repo}
	signatures__OperationInterface := self.signature[blatt1::Repository::Types::Signature]->map Signature2Signature(repo, result);
}

mapping blatt1::Repository::Types::Signature :: Signature2Signature(repo : palladio::repository::Repository, interface : palladio::repository::OperationInterface) : palladio::repository::OperationSignature {
	init {result.entityName := self.name}
	interface__OperationSignature := interface;
	if (self->oclIsTypeOf(blatt1::Repository::Types::ComplexType)) returnType__OperationSignature := self.returnType.map Type2CompositeDataType()
	else returnType__OperationSignature := self.returnType.map Type2PrimitiveDataType()
	endif;
}

mapping blatt1::Repository::Types::Type :: Type2CompositeDataType() : palladio::repository::CompositeDataType {
	init{}
}

mapping blatt1::Repository::Types::Type :: Type2PrimitiveDataType() : palladio::repository::PrimitiveDataType {
	init{
		if (self.oclIsTypeOf(blatt1::Repository::Types::Int)) result.type := palladio::repository::PrimitiveTypeEnum::INT
		elif (self.oclIsTypeOf(blatt1::Repository::Types::String)) result.type := palladio::repository::PrimitiveTypeEnum::STRING
		elif (self.oclIsTypeOf(blatt1::Repository::Types::Boolean)) result.type := palladio::repository::PrimitiveTypeEnum::BOOL
		elif (self.oclIsTypeOf(blatt1::Repository::Types::Double)) result.type := palladio::repository::PrimitiveTypeEnum::DOUBLE
		elif (self.oclIsTypeOf(blatt1::Repository::Types::Char)) result.type := palladio::repository::PrimitiveTypeEnum::CHAR
		//elif (self.oclIsTypeOf(blatt1::Repository::Types::Byte)) result.type := palladio::repository::PrimitiveTypeEnum::INT
		elif (self.oclIsTypeOf(blatt1::Repository::Types::Long)) result.type := palladio::repository::PrimitiveTypeEnum::LONG
		endif;
	}
}

mapping blatt1::Repository::Component :: Component2Component() : palladio::repository::BasicComponent {
	result.entityName := self.name;
	requiredRoles_InterfaceRequiringEntity := self.requiredInterface.map Interface2RequiredRole(self);
	providedRoles_InterfaceProvidingEntity := self.providedInterface.map Interface2ProvidedRole(self);
}

mapping blatt1::Repository::Interface :: Interface2ProvidedRole(comp : blatt1::Repository::Component) : palladio::repository::OperationProvidedRole {
	init {result.entityName := self.name;}
	providedInterface__OperationProvidedRole := self.resolveone(palladio::repository::OperationInterface);
}

mapping blatt1::Repository::Interface :: Interface2RequiredRole(comp : blatt1::Repository::Component) : palladio::repository::OperationRequiredRole {
	init {result.entityName := self.name;}
	requiredInterface__OperationRequiredRole := self.resolveone(palladio::repository::OperationInterface);
}

mapping blatt1::Assembly::System :: System2System() : palladio::system::System {
	assemblyContexts__ComposedStructure := self.encapsulatedAssemblyContext[blatt1::Assembly::AssemblyContext]-> map AssemblyContext2AssemblyContext(result);
}

mapping blatt1::Assembly::System :: System2Allocation() : palladio::allocation::Allocation {

	system_Allocation := self.map System2System();
	targetResourceEnvironment_Allocation := self.environment.map Environment2Environment();
	entityName := "Allocation";
	allocationContexts_Allocation := self.allocationContext[blatt1::Allocation::AllocationContext]-> map AllocationContext2AllocationContext(result);
	
}

mapping blatt1::Repository::CompositeComponent :: CompositeComponent2CompositeComponent() : palladio::repository::CompositeComponent{
	entityName := self.name;
	assemblyContexts__ComposedStructure := self.encapsulatedAssemblyContext.map AssemblyContext2AssemblyContext(result);
}

mapping blatt1::Assembly::AssemblyContext ::AssemblyContext2AssemblyContext(parent : palladio::core::composition::ComposedStructure) : palladio::core::composition::AssemblyContext {
	entityName := self.name;
//	if (self.resolve(palladio::repository::BasicComponent)->size() < 1)
//		encapsulatedComponent__AssemblyContext := self.component.map Component2Component(self)
//	else 
		encapsulatedComponent__AssemblyContext := self.component.resolveone(palladio::repository::BasicComponent);
//	endif;
	parentStructure__AssemblyContext := parent;
}

// ERROR: Result and out parameters of abstract types must be instantiated or assigned in the init-section
//mapping blatt1::Repository::Interface :: RequiredInterface2RequiredRole(blatt1::Repository::Component requiringComponent) : palladio::repository::RequiredRole {
//	entityName := self.name;
//	requiringEntity_RequiredRole := requiringComponent.map Component2Component(); //zyklus schlecht? in beispiel auch, also scheinbar ok
//}

//mapping blatt1::Assembly::Role :: RequiredRole2RequiredRole(requiringComponent : palladio::repository::BasicComponent) : palladio::repository::OperationRequiredRole {
//	init {result.entityName := self.name;}
//	requiringEntity_RequiredRole := requiringComponent;
//}
//
//mapping blatt1::Assembly::Role :: ProvidedRole2ProvidedRole(providingComponent : palladio::repository::BasicComponent) : palladio::repository::OperationProvidedRole {
//	init {result.entityName := self.name;}
//	providingEntity_ProvidedRole := providingComponent;
//}

mapping blatt1::Assembly::AssemblyConnector :: AssemblyConnector2AssemblyConnector() : palladio::core::composition::AssemblyConnector {
	
	providingAssemblyContext_AssemblyConnector := self.providedAssemblyContext.resolveone(palladio::core::composition::AssemblyContext);// AssemblyContext2AssemblyContext();
	requiringAssemblyContext_AssemblyConnector := self.requiredAssemblyContext.resolveone(palladio::core::composition::AssemblyContext);
	providedRole_AssemblyConnector := self.providedRole.resolveone(palladio::repository::OperationProvidedRole);
	requiredRole_AssemblyConnector := self.requiredRole.resolveone(palladio::repository::OperationRequiredRole);
}

mapping blatt1::Environment::Environment :: Environment2Environment() : palladio::resourceenvironment::ResourceEnvironment {
	entityName := "environment";
	linkingResources__ResourceEnvironment := self.link[blatt1::Environment::Link]->map Link2Link(result);
	resourceContainer_ResourceEnvironment
}

mapping blatt1::Environment::Link :: Link2Link(environment : palladio::resourceenvironment::ResourceEnvironment) : palladio::resourceenvironment::LinkingResource {
	entityName := self.name;
	resourceEnvironment_LinkingResource := environment;
	connectedResourceContainers_LinkingResource := self.linkedContainers[blatt1::Environment::Container]->map Container2Container(environment);
}

mapping blatt1::Environment::Container :: Container2Container(environment : palladio::resourceenvironment::ResourceEnvironment) : palladio::resourceenvironment::ResourceContainer {
	
	resourceEnvironment_ResourceContainer := environment;
	
}

mapping blatt1::Allocation::AllocationContext :: AllocationContext2AllocationContext(allocation : palladio::allocation::Allocation) : palladio::allocation::AllocationContext {
	
	allocation_AllocationContext := allocation;
	resourceContainer_AllocationContext := self.targetContainer.resolveone(palladio::resourceenvironment::ResourceContainer);
	assemblyContext_AllocationContext := self.allocatedAssemblyContext.resolveone(palladio::core::composition::AssemblyContext);
	
}

//mapping DelegationConnector2DelegationConnector wegoptimiert, da pcm dellegationConnector nichts tuts




