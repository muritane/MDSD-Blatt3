/*
 * Das "Simple UML to RDB" Besipiel demonstriert wie man QVT Transformationen nutzt um
 * Platform unabhängige Modelle zu Platform spezifischen Modellen zu transformieren.
 * 
 * Es zeigt auch die folgenden grundlegenden features der QVT Sprache:
 * Helfer Queries, Mapping Guards, und Auflösungs-Operationen.
 * 
  * Besipiel Model "pim.spimpleuml" ist mitgeliefert um als Eingabe für die Transformation genutzt zu werden.
 */

/*
 * Zwei Modelltypen werden deklariert. Die "http NS URIs" entsprechen denen, welche für die Registrierung des
 * Ecore Models genutzt wurden. Alternativ kann ein Workspace Meta-Modell genutzt werden,
 * in Kombination mit Mappings welche in den Projekteigenschaften definiert wurden.
 */
modeltype UML uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml';
modeltype RDB uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb';

/*
 * Die Transformations-Signatur deklariert, dass ein UML Modeltyp als Eingabe benötigt wird,
 * während in RDB Modeltyp als Ausgabe produziert wird. Auf den UML Modeltyp wird in der gesamten
 * Transformationsdefinition als 'uml' verwiesen, während kein Name für den RDB Modeltyp benötigt wird.
 * Merke: OCL-Typ und Namespace Notation werden in operationalem QVT genutzt (: und :: entsprechend)
 */
transformation Simpleuml_To_Rdb(in uml : UML, out RDB);

/*
 * Der haupt Ausgangspunkt der Transformation. Die 'uml' Referenz auf die Input UML Modeltyp-Instanz
 * wird verwendet um alle "rootObjects()" des Models einzusammeln. Die "rootObjects()" Methode
 * ist auf allen QVT Model Objekten ("extents") verfügbar und gibt jene Objekte zuück, welche im Ursprung
 * des Eingabe-Models gefunden werden. Das "[UML::Model]" Statement, welches auf den "rootObjects()" Aufruf folgt,
 * ist eine Kurznotation des imperativen Selektier- ("xselect") Konstruktors, worin die Bedingung ein Typausdruck ist,
 * welche effektiv ein "oclIsKindOf(UML::Model)" mit Typ-Casting als Sequenz durchführt.
 *
 * Der Aufruf des "model2RDBModel()" mappings wird mittels eines -> Operatoren umgesetzt, welches eine
 * Kurznotation des Imperativen collect ("xcollect") Konstruktors ist. ALternativ könnte man es
 * als "uml.rootObjects(){UML::Model]->xcollect(a | a.map model2RDBModel());" schreiben,
 */
main() {
	uml.rootObjects()[UML::Model]->map model2RDBModel();
}

/*
 * Dieses Mapping gibt eine RDB::Model Instanz des UML::Models, welches in "main()"" übergeben wurde, zurück.
 * Die "name" Attribute werden direkt über den OCL Zuweisungs-Operator abgebildet. Das RDB Model hat eine Sammlung
 * von Schemata, gefüllt mit "package2schemas()" Abbildungen. Die Sequenz von RDB:: Schema Objekten, 
 * welche vom Mapping zurückgegeben werden, werden zum benötigten sortierten Satz übersetzt,
 * mittels der OCL Methode "asOrderedSet()".
 *
 * Dieses Mapping hat keine "init" oder "end" Section, demnach ist der "Body" eine implizite Populations-Section.
 * ("Population" hier: Beschreibung - siehe 'QVT - Operational Mappings'.pdf, S.79')
 */
mapping UML::Model::model2RDBModel() : RDB::Model {
	name := self.name;
	schemas := self.map package2schemas()->asOrderedSet();
}

/*
 * Dieses Mapping ruft rekursiv das "package2schema()" Mapping auf, um eine Sequenz von
 * RDB schema Objekten, aus einem UML Packet und seinen Subpacketen, zu produzieren.
 * Beachte die Verwendung von OCL "union()" und "flatten()" Operationen um eine einzelne, flache Sequenz von
 * Schema-Objekten zu produzieren. 
 *
 * Es gibt keine Populations-Sektion in diesem Mapping, aber eine Init-Sektion, welche die Sequenz zurückgegebener
 * Objekte dem ergebnis zuweist. Alternativ könnte der Befehl hierunter in den Schema Zuweisung des Mappings
 * hierüber verwendet worden sein.
 */
mapping UML::Package::package2schemas() : Sequence(RDB::Schema) {
	init {
		result := self.map package2schema()->asSequence()->
			union(self.getSubpackages()->map package2schemas()->flatten());
	}
}

/*
 * Dieses Mapping erstellt ein RDB Schema-Objekt aus einem UML Paket. Es beinhaltet eine "when"-Klausel um
 * zu verifizieren dass das abgearbeitete Paket persistente Klassen enthält. Siehe unten um die anewandte Logik der
 * "hasPersistentClasses()" Methode zu sehen.
 *
 * Die Namens-Attribute werden direkt abgebildet, während die Element-Referenzen mit RDB-Tabellen-Objekten beschrieben
 * werden, welche von persistenten UML-Klassen-Objekten abgebildet wurden, mittels einer "map" "invocation" und
 * "similar" kurzschreibeweise, die auch oben schon verwendet wurde.
 */
mapping UML::Package::package2schema() : RDB::Schema 
	when { self.hasPersistentClasses() }
{
	name := self.name;
	elements := self.ownedElements[UML::Class]->map persistentClass2table()->asOrderedSet()
}

/*
 * Dieses Mapping produziert ein RDB-Tabellen-Objekt aus einem UML-Persistente-Klasse-Objekt.
 * Die Klausel nutzt die "isPersistent()" Methode um die Persistenz der UML-Klasse zu kontrollieren.
 *
 * Nochmal, die Namens-Attribute werden direkt abgebildet. Die Klasse wird auf einen Satz von Tabellen-Spalten-Objekten
 * abgebildet, mittels des "class2columns()" Mappings, deren Ergebnisse mittels der OCL "sortedBy()" Methode nach Namen
 * sortiert werden. Der Primärschlüssel wird mittels des "class2primaryKey()" Mappings gesetzt, während Fremdschlüssel
 * mittels einer "resolveIn()" Funktion gesetzt werden. Das wird uns ermöglichen RDB Fremdschlüssel Objekte,welche mit
 * dem "relationshipAttribute2foreignKey()" Mapping erzeugt wurden, für jedes Klassenattribut aufzulösen.
 */
mapping UML::Class::persistentClass2table() : RDB::Table 
	when { self.isPersistent() }
{
	name := self.name;
	columns := self.map class2columns(self)->sortedBy(name);
	primaryKey := self.map class2primaryKey();
	foreignKeys := self.attributes.resolveIn(
					UML::Property::relationshipAttribute2foreignKey, 
					RDB::constraints::ForeignKey)->asOrderedSet();
}

/*
 * Ein Primär-Schlüssel-Objekt wird aus einer Klasse erzeugt, indem ihr Name 'PK' als Präfix erhält und eine
 * (die Erste) Tabelle, die aus der Klasse erstellt wurde, aufgelöst wird um die Primärschlüssel ihrer Spalten mittels
 * einer Query zu erhalten.
 */
mapping UML::Class::class2primaryKey() : RDB::constraints::PrimaryKey {
	name := 'PK' + self.name;
	includedColumns := self.resolveoneIn(UML::Class::persistentClass2table, RDB::Table).getPrimaryKeyColumns()
}

/*
 * Dieses Mapping wird einen geordneten Satz von RDB-Tabellen-Spalten-Objekten aus einem UML-Klassen-Objekt erzeugen.
 * Wie bei "package2schemas()", hat dieses Mapping keine Beschreibungs-Sektion, sondern nur ein Init, welches das
 * Ergebnis, basierend auf der "union" der Typ-Mappings aus der Klasse und ihren Generalisierungen
 * ("Class extends DataType"), zuweist.
 *
 * Bemerke, dass dieses Mapping für den Typ "UML::CLass" definiert wurde und eine "UML::Class" namens "targetClass"
 * als Parameter entgegennimmt. Dieses Muster wird vielerorts in dieser Transformationsdefinition verwendet,
 * um darzustellen wie Generalisierungen im UML-Model auf Tabellen im RDB-Model abgebildet werden.
 * mapped to columns in the RDB model.  As properties and inherited properties are 
 * Da Eigenschaften und vererbte Eigenschaften in Tabellen gepresst werden, erlaubt die kombinierte Nutzung der "self"
 * und "target" parameter mehrere Kopien von Spalten für eine gegebene Eigenschafts-Quelle, da aufeinanderfolgende
 * Abbildungs-Aufrufe die selben Ergebnis-Spalten für das Trace-Model (?) zurückgeben.
 */
mapping UML::Class::class2columns(targetClass: UML::Class) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.map dataType2columns(targetClass)->
			union(self.map generalizations2columns(targetClass))->asOrderedSet()
	}	
}

/*
 * Für den durchlaufenen Datentyp wird ein geordneter Satz von Tabellen-Spalten-Objekten erstellt. Das Ergbnis
 * wird nochmals, im Init-Block der "union" mehrerer Attribut-zu-Spalten-Mappings, zugewiesen
 */
mapping UML::DataType::dataType2columns(in targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.map primitiveAttributes2columns(targetType)->
			union(self.map enumerationAttributes2columns(targetType))->
			union(self.map relationshipAttributes2columns(targetType))->
			union(self.map associationAttributes2columns(targetType))->asOrderedSet()
	}
}

/*
 * This mapping creates an OrderedSet of TableColumn objects from a DataType object.
 * The mapping declares three input parameters, including a prefix string and primary key
 * boolean.  
 *
 * The init section uses the result keyword with mapping invocation, as we've seen before.
 * What's new in this mapping is the use of an object definition within a collect operation.
 * Here, the OrderedSet of TableColumn objects returned from the dataType2columns() 
 * mapping is filtered to select only those marked as primary keys, which in turn are
 * used within the context of the collect where those matching the TableColumn created
 * using object are returned.
 */
mapping UML::DataType::dataType2primaryKeyColumns(in prefix : String, in leaveIsPrimaryKey : Boolean, in targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {           
		result := self.map dataType2columns(self)->select(isPrimaryKey)->
			collect(c | object RDB::TableColumn {
				name := prefix + '_' + c.name;
				domain := c.domain;
				type := object RDB::datatypes::PrimitiveDataType {
					name := c.type.name;
				};
				isPrimaryKey := leaveIsPrimaryKey
			})->asOrderedSet();
	}
}

/*
 * This mapping returns an OrderedSet of TableColumn objects by invoking the 
 * primitiveAttribute2column() mapping for each attribute of the DataType.
 */
mapping UML::DataType::primitiveAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map primitiveAttribute2column(targetType)->asOrderedSet()
	}
}

/*
 * This mapping creates a TableColumn from a Property when the isPrimitive() query
 * returns true.  The isPrimaryKey and name mappings are straightforward, while
 * the type reference is created using the object keyword to create a new
 * PrimitiveDataType with name initialized to the result of the query
 * umlPrimitive2rdbPrimitive() with the type name passed as a parameter.
 */
mapping UML::Property::primitiveAttribute2column(in targetType: UML::DataType) : RDB::TableColumn 
	when { self.isPrimitive() }
{
	isPrimaryKey := self.isPrimaryKey();
	name := self.name;
	type := object RDB::datatypes::PrimitiveDataType { name := umlPrimitive2rdbPrimitive(self.type.name); };
}

/*
 * This mapping returns an OrderedSet of TableColumn objects by invoking the 
 * enumerationAttribute2column() mapping for each attribute of the DataType.
 */
mapping UML::DataType::enumerationAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map enumerationAttribute2column(targetType)->asOrderedSet()
	}
}

/*
 * This mapping creates a TableColumn from a Property when the isEnumeration() query
 * returns true.  The isPrimaryKey and name mappings are straightforward, while
 * the type reference is created using the object keyword to create a new
 * PrimitiveDataType with name initialized to 'int'.
 */
mapping UML::Property::enumerationAttribute2column(in targetType: UML::DataType) : RDB::TableColumn 
	when { self.isEnumeration() }
{
	isPrimaryKey := self.isPrimaryKey();	
	name := self.name;
	type := object RDB::datatypes::PrimitiveDataType { name := 'int'; };
}

/*
 * This mapping creates an OrderedSet of TableColumn objects from relationship
 * attributes.  The check for if the DataType is a relationship is performed
 * in the when clause of the invoked relationshipAttribute2foreignKey mapping.
 */
mapping UML::DataType::relationshipAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map relationshipAttribute2foreignKey(targetType)->
			collect(includedColumns)->asOrderedSet();
	}
}

/*
 * This mapping creates a ForeignKey object from a DataType that returns true from 
 * the isRelationship() query in the when clause.  The name is prefixed with 'FK'.
 * The includedColumns collection is populated using the dataType2primaryKeyColumns()
 * mapping on the Property type reference cast to DataType.
 *
 * The referredUC reference uses resolveoneIn, but with the late modifier.  This 
 * causes the resolution to happen at the end of the transformation, thereby avoiding
 * a second pass to resolve objects that may not have been created during execution
 * at this point.
 */
mapping UML::Property::relationshipAttribute2foreignKey(in targetType: UML::DataType) : RDB::constraints::ForeignKey 
	when { self.isRelationship() }
{
	name := 'FK' + self.name;
	includedColumns := self.type.asDataType().map dataType2primaryKeyColumns(self.name, self.isIdentifying(), targetType);
	referredUC := self.type.late resolveoneIn(UML::Class::class2primaryKey, RDB::constraints::PrimaryKey);
}

/*
 * This mapping produces an OrderedSet of TableColumn objects from DataType attributes 
 * that return true from the isAssociation() query. The TableColumn objects are created 
 * using a call to the dataType2columns() mapping.
 */
mapping UML::DataType::associationAttributes2columns(targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes[isAssociation()]->
			collect(type.asDataType()->map dataType2columns(targetType))->asOrderedSet()
	}
}

/*
 * This mapping returns an OrderedSet of TableColumn objects from a Class using the 
 * generalizations of the class and the class2columns() mapping.
 */
mapping UML::Class::generalizations2columns(targetClass : UML::Class) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.generalizations.general->map class2columns(targetClass)->flatten()->asOrderedSet();
	}
}

/*
 * This query returns an OrderedSet of Package objects from a Package's ownedElements
 * collection that are of type UML::Package using shorthand xselect notation.
 */
query UML::Package::getSubpackages() : OrderedSet(UML::Package) {
	return self.ownedElements[UML::Package]->asOrderedSet()
}

/*
 * This query performs a type cast from a UML Type to a UML DataType.
 */
query UML::Type::asDataType() : UML::DataType {
	return self.oclAsType(UML::DataType)
}

/*
 * This query returns true if the list of string stereotypes includes one
 * equal to 'primaryKey'.
 */
query UML::Property::isPrimaryKey() : Boolean {
	return self.stereotype->includes('primaryKey')
}

/*
 * This query returns true if the list of string stereotypes includes one
 * equal to 'identifying'.
 */
query UML::Property::isIdentifying() : Boolean {
	return self.stereotype->includes('identifying')
}

/*
 * This query returns true if the type attribute of the Property conforms
 * to the UML PrimitiveType.
 */
query UML::Property::isPrimitive() : Boolean {
	return self.type.oclIsKindOf(UML::PrimitiveType)
}

/*
 * This query returns true if the type attribute of the Property conforms
 * to the UML Enumeration.
 */
query UML::Property::isEnumeration() : Boolean {
	return self.type.oclIsKindOf(UML::Enumeration)
}

/*
 * This query returns true if the type attribute of the Property conforms
 * to the UML DataType and returns true from the isPersistent() query.
 */
query UML::Property::isRelationship() : Boolean {
	return self.type.oclIsKindOf(UML::DataType) and self.type.isPersistent()
}

/*
 * This query returns true if the type attribute of the Property conforms
 * to the UML DataType and returns false from the isPersistent() query.
 */
query UML::Property::isAssociation() : Boolean {
	return self.type.oclIsKindOf(UML::DataType) and not self.type.isPersistent()
}

/*
 * This query returns an OrderedSet of TableColumn objects from those columns
 * where isPrimaryKey returns true.
 */
query RDB::Table::getPrimaryKeyColumns() : OrderedSet(RDB::TableColumn) {
	return self.columns->select(isPrimaryKey)
}

/*
 * This query returns true if the list of string stereotypes includes one
 * equal to 'persistent'.
 */
query UML::ModelElement::isPersistent() : Boolean {
	return self.stereotype->includes('persistent')
}

/*
 * This query examines the contents of a Package to determine if there exists
 * at least one Class that returns true for the isPersistent() query.
 */
query UML::Package::hasPersistentClasses() : Boolean {
	return self.ownedElements->exists(
		let c : UML::Class = oclAsType(UML::Class) in 
			c.oclIsUndefined() implies c.isPersistent())
}

/*
 * This helper returns the RDB primitive string corresponding to the passed 
 * UML primitive string.  This helper produces no side effects and could be 
 * written as a query, alternatively.
 */
helper umlPrimitive2rdbPrimitive(in name : String) : String {
	return if name = 'String' then 'varchar' else
		if name = 'Boolean' then 'int' else
			if name = 'Integer' then 'int' else
				name
			endif
		endif
	endif
}
